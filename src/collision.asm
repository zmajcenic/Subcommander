; rutina za provjeru da li je torpedo unutar podrucja broda
; IX = hw_sprite
; IY = sprite (brod)
; C = sirina broda
; vraca CF=1 ako nadjeno poklapanje
CHECK_HORIZONTAL_OVERLAP:
	PUSH	DE

	LD	L, (IY + OFF_SPRITE_X)
	LD	H, (IY + OFF_SPRITE_X + 1)
	LD	A, (IX + OFF_HW_SPRITE_X)

	BIT	7, H
	JR	NZ, CHECK_HORIZONTAL_OVERLAP_L1; brod.x < 0
	LD	D, A
	LD	A, H
	CP	1
	JR	NC, CHECK_HORIZONTAL_OVERLAP_EXIT; brod.x > 256
	LD	A, D
	CP	L
	JR	C, CHECK_HORIZONTAL_OVERLAP_EXIT; hw_sprite.x < brod.x
CHECK_HORIZONTAL_OVERLAP_L1:
	LD	D, 0
	LD	E, C
	ADD	HL, DE
	BIT	7, H
	JR	NZ, CHECK_HORIZONTAL_OVERLAP_EXIT; brod potpuno u minusu
	LD	D, A
	LD	A, H
	CP	1
	JR	NC, CHECK_HORIZONTAL_OVERLAP_HIT; brod izlazi iz ekrana ali vec znamo da smo u njemu, hit
	LD	A, D
	CP	L
	JR	C, CHECK_HORIZONTAL_OVERLAP_HIT
CHECK_HORIZONTAL_OVERLAP_EXIT:
	POP	DE
	XOR	A; cf=0
	RET
CHECK_HORIZONTAL_OVERLAP_HIT:
	POP	DE
	SCF
	RET

; rutina koja prolazi kroz sve sprajtove instance i provjerava za pogodak
; IX = hw_sprite
; IY = ptr na prvi sprite instance
; C = sirina broda
; ako pogodak CF=1, IY = ptr na pogodjeni brod
CHECK_INST_SPRITES_FOR_COLLISION:
	LD	B, 4
	LD	DE, SIZEOF_SPRITE
CHECK_INST_SPRITES_FOR_COLLISION_L1:
	LD	A, (IY + OFF_SPRITE_AKTIV_FLAG)
	OR	A
	JR	Z, CHECK_INST_SPRITES_FOR_COLLISION_L2
	CALL	CHECK_HORIZONTAL_OVERLAP
	RET	C; collision
CHECK_INST_SPRITES_FOR_COLLISION_L2:
	ADD	IY, DE
	DJNZ	CHECK_INST_SPRITES_FOR_COLLISION_L1
	; no collision
	XOR	A; cf=0
	RET

; rutina za detekciju pogotka torpeda u floatsome ili brod
; IX = hw sprite
; L = 0 | 1, provjeri pogodak samo za floatsome ili za sve
; vraca cf=1 ako pogodak, IX = row inst, IY = sprite, A = 1 ako pogodjen floatsome
COLLISION_DETECTION:
	LD	A, (IX + OFF_HW_SPRITE_Y)
	AND	7; zanima nas ako smo u gornjoj polovici reda, jer su brodovi obicno kraci
	CP	5
	JR	NC, COLLISION_DETECTION_EXIT
	LD	A, (IX + OFF_HW_SPRITE_Y)
	SRL	A
	SRL	A
	SRL	A
	LD	C, A
	; A = redak
	CP	16; floatsome
	JR	Z, COLLISION_DETECTION_FLOATSOME
	; treba li provjeriti row collision
	LD	A, L
	OR	A
	JR	Z, COLLISION_DETECTION_EXIT
	; sad prolazimo kroz aktivne instance
	LD	A, (ROW2_BROD_INST + OFF_BROD_INST_ID)
	OR	A
	JR	Z, COLLISION_DETECTION_L1
	LD	A, (ROW2_BROD_INST + OFF_BROD_INST_DIM_Y)
	INC	A; +2-1
	SUB	C
	JR	Z, COLLISION_DETECTION_ROW2
COLLISION_DETECTION_L1:
	LD	A, (ROW5_BROD_INST + OFF_BROD_INST_ID)
	OR	A
	JR	Z, COLLISION_DETECTION_L2
	LD	A, (ROW5_BROD_INST + OFF_BROD_INST_DIM_Y)
	ADD	A, 4
	SUB	C
	JR	Z, COLLISION_DETECTION_ROW5
COLLISION_DETECTION_L2:
	LD	A, (ROW8_BROD_INST + OFF_BROD_INST_ID)
	OR	A
	JR	Z, COLLISION_DETECTION_L3
	LD	A, (ROW8_BROD_INST + OFF_BROD_INST_DIM_Y)
	ADD	A, 7
	SUB	C
	JR	Z, COLLISION_DETECTION_ROW8
COLLISION_DETECTION_L3:
	LD	A, (ROW10_BROD_INST + OFF_BROD_INST_ID)
	OR	A
	JR	Z, COLLISION_DETECTION_L4
	LD	A, (ROW10_BROD_INST + OFF_BROD_INST_DIM_Y)
	ADD	A, 9
	SUB	C
	JR	Z, COLLISION_DETECTION_ROW10
COLLISION_DETECTION_L4:
	LD	A, (ROW13_BROD_INST + OFF_BROD_INST_ID)
	OR	A
	JR	Z, COLLISION_DETECTION_EXIT
	LD	A, (ROW13_BROD_INST + OFF_BROD_INST_DIM_Y)
	ADD	A, 12
	SUB	C
	JP	Z, COLLISION_DETECTION_ROW13
COLLISION_DETECTION_EXIT:
	XOR	A; cf=0
	RET
COLLISION_DETECTION_FLOATSOME:
	LD	IY, ROW16_BROD_INST + OFF_BROD_INST_SPRITE
	LD	A, (ROW16_BROD_INST + OFF_BROD_INST_DIM_X)
	SLA	A
	SLA	A
	SLA	A
	LD	C, A; width u pixelima
	CALL	CHECK_INST_SPRITES_FOR_COLLISION
	RET	NC
	; floatsome hit
	; postavljanje IX nije bitno
	LD	A, 1
	JP	COLLISION_DETECTION_PLAY_SOUND_AND_EXIT
COLLISION_DETECTION_ROW2:
	LD	IY, ROW2_BROD_INST + OFF_BROD_INST_SPRITE
	LD	A, (ROW2_BROD_INST + OFF_BROD_INST_DIM_X)
	SLA	A
	SLA	A
	SLA	A
	LD	C, A; width u pixelima
	CALL	CHECK_INST_SPRITES_FOR_COLLISION
	RET	NC
	; ROW2 hit
	LD	A, 0
	LD	IX, ROW2_BROD_INST
	JR	COLLISION_DETECTION_PLAY_SOUND_AND_EXIT	
COLLISION_DETECTION_ROW5:
	LD	IY, ROW5_BROD_INST + OFF_BROD_INST_SPRITE
	LD	A, (ROW5_BROD_INST + OFF_BROD_INST_DIM_X)
	SLA	A
	SLA	A
	SLA	A
	LD	C, A; width u pixelima
	CALL	CHECK_INST_SPRITES_FOR_COLLISION
	RET	NC
	; ROW5 hit
	LD	A, 0
	LD	IX, ROW5_BROD_INST
	JR	COLLISION_DETECTION_PLAY_SOUND_AND_EXIT
COLLISION_DETECTION_ROW8:
	LD	IY, ROW8_BROD_INST + OFF_BROD_INST_SPRITE
	LD	A, (ROW8_BROD_INST + OFF_BROD_INST_DIM_X)
	SLA	A
	SLA	A
	SLA	A
	LD	C, A; width u pixelima
	CALL	CHECK_INST_SPRITES_FOR_COLLISION
	RET	NC
	; ROW8 hit
	LD	A, 0
	LD	IX, ROW8_BROD_INST
	JR	COLLISION_DETECTION_PLAY_SOUND_AND_EXIT
COLLISION_DETECTION_ROW10:
	LD	IY, ROW10_BROD_INST + OFF_BROD_INST_SPRITE
	LD	A, (ROW10_BROD_INST + OFF_BROD_INST_DIM_X)
	SLA	A
	SLA	A
	SLA	A
	LD	C, A; width u pixelima
	CALL	CHECK_INST_SPRITES_FOR_COLLISION
	RET	NC
	; ROW10 hit
	LD	A, 0
	LD	IX, ROW10_BROD_INST
	JR	COLLISION_DETECTION_PLAY_SOUND_AND_EXIT
COLLISION_DETECTION_ROW13:
	LD	IY, ROW13_BROD_INST + OFF_BROD_INST_SPRITE
	LD	A, (ROW13_BROD_INST + OFF_BROD_INST_DIM_X)
	SLA	A
	SLA	A
	SLA	A
	LD	C, A; width u pixelima
	CALL	CHECK_INST_SPRITES_FOR_COLLISION
	RET	NC
	; ROW13 hit
	LD	A, 0
	LD	IX, ROW13_BROD_INST
COLLISION_DETECTION_PLAY_SOUND_AND_EXIT:
	PUSH	AF
	LD	A, (GAMETIMER_ENDED)
	OR	A
	JR	NZ, COLLISION_DETECTION_PLAY_SOUND_AND_EXIT_L1
	; sound
	LD	A, 1; sound effect number
	LD	C, 1; channel
	LD	B, 0; volume, 0=full
	CALL	SOUNDS_PLAYER_PLAY
COLLISION_DETECTION_PLAY_SOUND_AND_EXIT_L1:
	POP	AF
	RET		

; rutina inicijalizira torpedo, animacija_inst i hw_sprite kod pogotka floatsome-a
; HL = hw_sprite
; IX = torpedo
; IY = animacija_inst
FLOATSOME_HIT_INIT:
	LD	(IY + OFF_ANIMACIJA_INST_ACTIVE), 1
	LD	(IY + OFF_ANIMACIJA_INST_CURR_ITER), 0
	LD	DE, (JIFFY)
	LD	(IY + OFF_ANIMACIJA_INST_TIME), E
	LD	(IX + OFF_TORPEDO_BEGIN_TIME), E
	LD	(IY + OFF_ANIMACIJA_INST_TIME +1), D
	LD	(IX + OFF_TORPEDO_BEGIN_TIME +1), D
	LD	(IX + OFF_TORPEDO_STATUS), TORPEDO_STATUS_LOADING
	PUSH	HL
	LD	HL, ANIMACIJA_FLOATSOME_HIT
	LD	(IY + OFF_ANIMACIJA_INST_ANIMACIJA), L
	LD	(IY + OFF_ANIMACIJA_INST_ANIMACIJA + 1), H
	POP	IY
	LD	(IY + OFF_HW_SPRITE_Y), 128
	LD	A, (IY + OFF_HW_SPRITE_X)
	SUB	5
	LD	(IY + OFF_HW_SPRITE_X), A
	LD	A, (HL); num_iter
	LD	E, A
	LD	D, 0
	INC	HL
	INC	HL
	ADD	HL, DE
	LD	A, (HL); pattern[0]
	LD	(IY + OFF_HW_SPRITE_PATTERN), A
	ADD	HL, DE
	LD	A, (HL); color[0]
	LD	(IY + OFF_HW_SPRITE_COLOR), A
	PUSH	IY
	POP	HL
	LD	A, (IX + OFF_TORPEDO_HW_SPRITE_INDEX)
	CALL	PUT_SPRITE_FULL
	RET

; rutina brise brod, inicijalizira torpedo, animacija_inst i hw_sprite kod pogotka broda
; IX = row
; IY = brod sprite
; HL = torpedo
; BC = hw_sprite
; DE = animacija_inst
BROD_HIT_INIT:
	LD	(IY + OFF_SPRITE_AKTIV_FLAG), 0; inst_sprite.active = 0
	CALL	ERASE_INST_SPRITE
	
	PUSH	BC; zapamti za kasnije hw_sprite
	LD	A, (BC)
	SUB	16
	LD	(BC), A; hw_sprite.y = hw_sprite.y - 16
	INC	BC
	INC	BC
	INC	BC
	; BC = hw_sprite.p
	PUSH	HL
	POP	IY
	LD	HL, (JIFFY)
	LD	(IY + OFF_TORPEDO_BEGIN_TIME), L
	LD	(IY + OFF_TORPEDO_BEGIN_TIME + 1), H
	LD	(IY + OFF_TORPEDO_STATUS), TORPEDO_STATUS_LOADING

	LD	A, 1
	LD	(DE), A; animacija_inst.active = 1
	INC	DE
	XOR	A
	LD	(DE), A; animacija_inst.curr_iter = 0
	INC	DE
	LD	A, L
	LD	(DE), A
	INC	DE
	LD	A, H
	LD	(DE), A; animacija_inst.time = JIFFY
	INC	DE
	LD	HL, ANIMACIJA_BROD_HIT
	LD	A, L
	LD	(DE), A
	INC	DE
	LD	A, H
	LD	(DE), A; animacija_inst.animacija = ANIMACIJA_BROD_HIT
	INC	DE
	LD	A, (DE); A=animacija_inst.hw_sprite_index
	PUSH	AF; zapamti za kasnije
	
	LD	D, 0
	LD	E, (HL); DE = animacija.num_iter
	INC	HL
	INC	HL
	ADD	HL, DE
	; HL = animacija.pattern[0]
	LD	A, (HL)
	LD	(BC), A; hw_sprite.p=animacija.pattern[0]
	ADD	HL, DE
	INC	BC
	LD	A, (HL)
	LD	(BC), A; hw_sprite.color=animacija.color[0]
	POP	AF; hw_sprite index
	POP	HL; hw_sprite
	CALL	PUT_SPRITE_FULL
	RET

; rutina za provjeru pogotka za sva torpeda
CHECK_TORPEDO_HITS:
	; player 1, torpedo L1
	DI
	LD	A, (PLAYER1_TORPEDO_L1 + OFF_TORPEDO_STATUS)
	CP	TORPEDO_STATUS_FIRED
	JR	NZ, CHECK_TORPEDO_HITS_P1L2
	LD	IX, HW_SPRITE_TORPEDO_PLAYER1_L1
	LD	L, 1
	CALL	COLLISION_DETECTION
	JR	NC, CHECK_TORPEDO_HITS_P1L2
	OR	A
	JR	Z, CHECK_TORPEDO_HITS_P1L1_BROD_HIT
	; floatsome hit
	LD	HL, HW_SPRITE_TORPEDO_PLAYER1_L1
	LD	IX, PLAYER1_TORPEDO_L1
	LD	IY, ANIMACIJA_INST_PLAYER1_TORPEDO_L1
	CALL	FLOATSOME_HIT_INIT
	JR	CHECK_TORPEDO_HITS_P1L2
CHECK_TORPEDO_HITS_P1L1_BROD_HIT:
	; IX i IY vec podeseni
	CALL	PLAYER1_UPDATE_SCORE
	LD	HL, PLAYER1_TORPEDO_L1
	LD	BC, HW_SPRITE_TORPEDO_PLAYER1_L1
	LD	DE, ANIMACIJA_INST_PLAYER1_TORPEDO_L1
	CALL	BROD_HIT_INIT

CHECK_TORPEDO_HITS_P1L2:
	EI
	NOP

	; player 1, torpedo L2
	DI
	LD	A, (PLAYER1_TORPEDO_L2 + OFF_TORPEDO_STATUS)
	CP	TORPEDO_STATUS_FIRED
	JR	NZ, CHECK_TORPEDO_HITS_P1R1
	LD	IX, HW_SPRITE_TORPEDO_PLAYER1_L2
	LD	L, 1
	CALL	COLLISION_DETECTION
	JR	NC, CHECK_TORPEDO_HITS_P1R1
	OR	A
	JR	Z, CHECK_TORPEDO_HITS_P1L2_BROD_HIT
	; floatsome hit
	LD	HL, HW_SPRITE_TORPEDO_PLAYER1_L2
	LD	IX, PLAYER1_TORPEDO_L2
	LD	IY, ANIMACIJA_INST_PLAYER1_TORPEDO_L2
	CALL	FLOATSOME_HIT_INIT
	JR	CHECK_TORPEDO_HITS_P1R1
CHECK_TORPEDO_HITS_P1L2_BROD_HIT:
	CALL	PLAYER1_UPDATE_SCORE
	LD	HL, PLAYER1_TORPEDO_L2
	LD	BC, HW_SPRITE_TORPEDO_PLAYER1_L2
	LD	DE, ANIMACIJA_INST_PLAYER1_TORPEDO_L2
	CALL	BROD_HIT_INIT

CHECK_TORPEDO_HITS_P1R1:
	EI
	NOP

	; player 1, torpedo R1
	DI
	LD	A, (PLAYER1_TORPEDO_R1 + OFF_TORPEDO_STATUS)
	CP	TORPEDO_STATUS_FIRED
	JR	NZ, CHECK_TORPEDO_HITS_P1R2
	LD	IX, HW_SPRITE_TORPEDO_PLAYER1_R1
	LD	L, 1
	CALL	COLLISION_DETECTION
	JR	NC, CHECK_TORPEDO_HITS_P1R2
	OR	A
	JR	Z, CHECK_TORPEDO_HITS_P1R1_BROD_HIT
	; floatsome hit
	LD	HL, HW_SPRITE_TORPEDO_PLAYER1_R1
	LD	IX, PLAYER1_TORPEDO_R1
	LD	IY, ANIMACIJA_INST_PLAYER1_TORPEDO_R1
	CALL	FLOATSOME_HIT_INIT
	JR	CHECK_TORPEDO_HITS_P1R2
CHECK_TORPEDO_HITS_P1R1_BROD_HIT:
	CALL	PLAYER1_UPDATE_SCORE
	LD	HL, PLAYER1_TORPEDO_R1
	LD	BC, HW_SPRITE_TORPEDO_PLAYER1_R1
	LD	DE, ANIMACIJA_INST_PLAYER1_TORPEDO_R1
	CALL	BROD_HIT_INIT

CHECK_TORPEDO_HITS_P1R2:
	EI
	NOP

	; player 1, torpedo R2
	DI
	LD	A, (PLAYER1_TORPEDO_R2 + OFF_TORPEDO_STATUS)
	CP	TORPEDO_STATUS_FIRED
	JR	NZ, CHECK_TORPEDO_HITS_P2L1
	LD	IX, HW_SPRITE_TORPEDO_PLAYER1_R2
	LD	L, 1
	CALL	COLLISION_DETECTION
	JR	NC, CHECK_TORPEDO_HITS_P2L1
	OR	A
	JR	Z, CHECK_TORPEDO_HITS_P1R2_BROD_HIT
	; floatsome hit
	LD	HL, HW_SPRITE_TORPEDO_PLAYER1_R2
	LD	IX, PLAYER1_TORPEDO_R2
	LD	IY, ANIMACIJA_INST_PLAYER1_TORPEDO_R2
	CALL	FLOATSOME_HIT_INIT
	JR	CHECK_TORPEDO_HITS_P2L1
CHECK_TORPEDO_HITS_P1R2_BROD_HIT:
	CALL	PLAYER1_UPDATE_SCORE
	LD	HL, PLAYER1_TORPEDO_R2
	LD	BC, HW_SPRITE_TORPEDO_PLAYER1_R2
	LD	DE, ANIMACIJA_INST_PLAYER1_TORPEDO_R2
	CALL	BROD_HIT_INIT

CHECK_TORPEDO_HITS_P2L1:
	EI
	
	LD	A, (TWO_PLAYER_GAME)
	OR	A
	RET	Z

	; player 2, torpedo L1
	DI
	LD	A, (PLAYER2_TORPEDO_L1 + OFF_TORPEDO_STATUS)
	CP	TORPEDO_STATUS_FIRED
	JR	NZ, CHECK_TORPEDO_HITS_P2L2
	LD	IX, HW_SPRITE_TORPEDO_PLAYER2_L1
	LD	L, 1
	CALL	COLLISION_DETECTION
	JR	NC, CHECK_TORPEDO_HITS_P2L2
	OR	A
	JR	Z, CHECK_TORPEDO_HITS_P2L1_BROD_HIT
	; floatsome hit
	LD	HL, HW_SPRITE_TORPEDO_PLAYER2_L1
	LD	IX, PLAYER2_TORPEDO_L1
	LD	IY, ANIMACIJA_INST_PLAYER2_TORPEDO_L1
	CALL	FLOATSOME_HIT_INIT
	JR	CHECK_TORPEDO_HITS_P2L2
CHECK_TORPEDO_HITS_P2L1_BROD_HIT:
	CALL	PLAYER2_UPDATE_SCORE
	LD	HL, PLAYER2_TORPEDO_L1
	LD	BC, HW_SPRITE_TORPEDO_PLAYER2_L1
	LD	DE, ANIMACIJA_INST_PLAYER2_TORPEDO_L1
	CALL	BROD_HIT_INIT

CHECK_TORPEDO_HITS_P2L2:
	EI
	NOP

	; player 2, torpedo L2
	DI
	LD	A, (PLAYER2_TORPEDO_L2 + OFF_TORPEDO_STATUS)
	CP	TORPEDO_STATUS_FIRED
	JR	NZ, CHECK_TORPEDO_HITS_P2R1
	LD	IX, HW_SPRITE_TORPEDO_PLAYER2_L2
	LD	L, 1
	CALL	COLLISION_DETECTION
	JR	NC, CHECK_TORPEDO_HITS_P2R1
	OR	A
	JR	Z, CHECK_TORPEDO_HITS_P2L2_BROD_HIT
	; floatsome hit
	LD	HL, HW_SPRITE_TORPEDO_PLAYER2_L2
	LD	IX, PLAYER2_TORPEDO_L2
	LD	IY, ANIMACIJA_INST_PLAYER2_TORPEDO_L2
	CALL	FLOATSOME_HIT_INIT
	JR	CHECK_TORPEDO_HITS_P2R1
CHECK_TORPEDO_HITS_P2L2_BROD_HIT:
	CALL	PLAYER2_UPDATE_SCORE
	LD	HL, PLAYER2_TORPEDO_L2
	LD	BC, HW_SPRITE_TORPEDO_PLAYER2_L2
	LD	DE, ANIMACIJA_INST_PLAYER2_TORPEDO_L2
	CALL	BROD_HIT_INIT

CHECK_TORPEDO_HITS_P2R1:
	EI
	NOP

	; player 2, torpedo R1
	DI
	LD	A, (PLAYER2_TORPEDO_R1 + OFF_TORPEDO_STATUS)
	CP	TORPEDO_STATUS_FIRED
	JR	NZ, CHECK_TORPEDO_HITS_P2R2
	LD	IX, HW_SPRITE_TORPEDO_PLAYER2_R1
	LD	L, 1
	CALL	COLLISION_DETECTION
	JR	NC, CHECK_TORPEDO_HITS_P2R2
	OR	A
	JR	Z, CHECK_TORPEDO_HITS_P2R1_BROD_HIT
	; floatsome hit
	LD	HL, HW_SPRITE_TORPEDO_PLAYER2_R1
	LD	IX, PLAYER2_TORPEDO_R1
	LD	IY, ANIMACIJA_INST_PLAYER2_TORPEDO_R1
	CALL	FLOATSOME_HIT_INIT
	JR	CHECK_TORPEDO_HITS_P2R2
CHECK_TORPEDO_HITS_P2R1_BROD_HIT:
	CALL	PLAYER2_UPDATE_SCORE
	LD	HL, PLAYER2_TORPEDO_R1
	LD	BC, HW_SPRITE_TORPEDO_PLAYER2_R1
	LD	DE, ANIMACIJA_INST_PLAYER2_TORPEDO_R1
	CALL	BROD_HIT_INIT

CHECK_TORPEDO_HITS_P2R2:
	EI
	NOP

	; player 2, torpedo R2
	DI
	LD	A, (PLAYER2_TORPEDO_R2 + OFF_TORPEDO_STATUS)
	CP	TORPEDO_STATUS_FIRED
	JR	NZ, CHECK_TORPEDO_HITS_EXIT
	LD	IX, HW_SPRITE_TORPEDO_PLAYER2_R2
	LD	L, 1
	CALL	COLLISION_DETECTION
	JR	NC, CHECK_TORPEDO_HITS_EXIT
	OR	A
	JR	Z, CHECK_TORPEDO_HITS_P2R2_BROD_HIT
	; floatsome hit
	LD	HL, HW_SPRITE_TORPEDO_PLAYER2_R2
	LD	IX, PLAYER2_TORPEDO_R2
	LD	IY, ANIMACIJA_INST_PLAYER2_TORPEDO_R2
	CALL	FLOATSOME_HIT_INIT
	JR	CHECK_TORPEDO_HITS_EXIT
CHECK_TORPEDO_HITS_P2R2_BROD_HIT:
	CALL	PLAYER2_UPDATE_SCORE
	LD	HL, PLAYER2_TORPEDO_R2
	LD	BC, HW_SPRITE_TORPEDO_PLAYER2_R2
	LD	DE, ANIMACIJA_INST_PLAYER2_TORPEDO_R2
	CALL	BROD_HIT_INIT

CHECK_TORPEDO_HITS_EXIT:
	EI
	RET